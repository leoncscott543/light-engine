name: Rust CI/CD Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

 
permissions:
  contents: read
  packages: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    container:
    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Build (x86_64)
        run: cargo build --release --verbose

      - name: Run tests (x86_64)
        run: cargo test --verbose

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/light-engine:latest .

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/light-engine:latest

      # Docker build/test steps can be omitted if your dev container image is the build environment

  build-windows:
    runs-on: windows-latest
    container:
      image: ghcr.io/leoncscott543/light-engine:latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install system dependencies (Chocolatey)
        run: |
          choco install -y cmake llvm git python3
          choco install -y openssl pkgconfig wget unzip
          choco install -y protobuf sqlite
          choco install -y vulkan-sdk
          pip install tensorflow torch torchvision torchaudio

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: windows-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            windows-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: windows-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            windows-cargo-git-

      - run: cargo build --release --verbose
      - run: cargo test --verbose

  build-macos:
    runs-on: macos-latest
    container:
      image: ghcr.io/leoncscott543/light-engine:latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install system dependencies (Homebrew)
        run: |
          brew update
          brew install cmake llvm git python3 openssl pkg-config wget unzip protobuf sqlite3 vulkan-headers
          pip3 install tensorflow torch torchvision torchaudio

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: macos-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            macos-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: macos-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            macos-cargo-git-

      - run: cargo build --release --verbose
      - run: cargo test --verbose

  docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/light-engine:latest .

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/light-engine:latest

