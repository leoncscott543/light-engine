name: Rust CI/CD Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Rust
    - name: Set up Rust
      uses: actions/setup-rust@v2
      with:
        rust-version: stable  # Can be adjusted to use a specific version or nightly if needed

    # Step 3: Cache Cargo dependencies
    - name: Cache Cargo dependencies
      uses: actions/cache@v2
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    # Step 4: Build the Rust project
    - name: Build project
      run: cargo build --release --verbose

    # Step 5: Run Clippy (Rust linter)
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    # Step 6: Run tests
    - name: Run tests
      run: cargo test --verbose

    # Optional: Cross-compiling tests (e.g., test on multiple platforms)
    - name: Run tests on multiple targets
      run: |
        cargo build --target x86_64-unknown-linux-gnu
        cargo test --target x86_64-unknown-linux-gnu
        cargo build --target aarch64-unknown-linux-gnu
        cargo test --target aarch64-unknown-linux-gnu

    # Step 7: Build Docker image (if relevant for your project)
    - name: Build Docker image
      run: |
        docker build -t leonscott543/lightengine .
