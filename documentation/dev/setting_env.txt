4/15/2025
Leon Scott

--- keeping track of some initial procedural tasks setting up dev env for core light engine ---- 

- downloaded git
- created new light engine repository
- flushed out a rough draft of the engine directory tree structure
- made some generalist readme's, license, consistituion .mds.... will refine as I proceed 
- will develop on windows for the time being, at least setting up dev env.... 
- will migrate to linux, debian probably, once i begin low level development

- VS code as editor right now
- developed the core stack... will place it in this directory

RUST:
downloaded and installed rust standard tooling
  C:\Users\leonc\.rustup
  C:\Users\leonc\.cargo
  C:\Users\leonc\.cargo\bin
  
modifying the HKEY_CURRENT_USER/Environment/PATH registry key

- moved all tree modules into /src, per Rust project structure guidelines

To build and run your project cross-platform:

Install Rust and Cargo on each platform using rustup.
Install a C compiler:
Linux: sudo apt install build-essential
macOS: xcode-select --install
Windows: Install Build Tools for Visual Studio or use MSYS2.
Use cargo build and cargo run as usual.

Windows SubSystem for Linux dev Setup:

- installed WSL -windows subsystem for linux - in windows 11.... 
  - provides full linux env for development'
- update windows kernel to support Ubuntu WSL2
- use wsl2 in vs code from here on out for max parody across systems
- upgrade to latest ubuntu.... ->>>> sudo apt upgrade..... 
- sticking with 24.04 LTS for max stability


DockerSetup
- install docker desktop 
- Enable autoMemoryReclaim setting in WSL for better experience 
- follow these wsl docker steps https://learn.microsoft.com/en-us/windows/wsl/tutorials/wsl-containers
- run docker hello-world
"Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
    (amd64)
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal."